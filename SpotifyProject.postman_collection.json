{
	"info": {
		"_postman_id": "eecbc1d2-6692-44a9-85fb-2bbace1d6657",
		"name": "Spotify Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30950209"
	},
	"item": [
		{
			"name": "Search functionality",
			"item": [
				{
					"name": "valid search for track",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Defining expected track name\r",
									"var expectedTrackName = \"Believer\"; \r",
									"\r",
									"//  if the response contains the expected track name\r",
									"pm.test(\"Response should contain the expected track name\", function () {\r",
									"    pm.expect(jsonResponse.tracks.items[0].name).to.eql(expectedTrackName);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=track:Believer%20artist:Imagine%20Dragons&type=track&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "track:Believer%20artist:Imagine%20Dragons"
								},
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "search using only track name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Define the expected track name and album name\r",
									"var expectedTrackName = \"Believer\"; \r",
									"var expectedAlbumName = \"Evolve\";   \r",
									"// Check if the response contains the expected track name and album name\r",
									"pm.test(\"Response should contain the expected track name and album name\", function () {\r",
									"    pm.expect(jsonResponse.tracks.items[0].name).to.eql(expectedTrackName);\r",
									"    pm.expect(jsonResponse.tracks.items[0].album.name).to.eql(expectedAlbumName);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=track:Believer&type=track&limit=4",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "track:Believer"
								},
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid search without entering type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 3ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 400 bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=track:Believer%20artist:Imagine%20Dragons&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "track:Believer%20artist:Imagine%20Dragons"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid search without entering q",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 3ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 400 bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?type=track&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "type",
									"value": "track"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "searching a track with type album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=track:Believer%20artist:Imagine%20Dragons&type=album&limit=10",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "track:Believer%20artist:Imagine%20Dragons"
								},
								{
									"key": "type",
									"value": "album"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "searching 4 album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album\");\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Define the expected album name\r",
									"var expectedAlbumName = \"Evolve\"; // Change this to the expected album name\r",
									"\r",
									"// Check if the response contains the expected album name\r",
									"pm.test(\"Response should contain the expected album name\", function () {\r",
									"    pm.expect(jsonResponse.albums.items.length).to.be.above(0); // Check if there are albums in the response\r",
									"\r",
									"    // Iterate through each album and check if it contains the expected album name\r",
									"    jsonResponse.albums.items.forEach(function (album) {\r",
									"        pm.expect(album.name).to.eql(expectedAlbumName);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=album:Evolve%20artist:Imagine%20Dragons&type=album&limit=1",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "album:Evolve%20artist:Imagine%20Dragons"
								},
								{
									"key": "type",
									"value": "album"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "searching 4 album using track name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"album\");\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"var expectedAlbumName = \"Evolve\"; // the expected album name\r",
									"\r",
									"// Check if the response contains the expected album name\r",
									"pm.test(\"Response should contain the expected album name\", function () {\r",
									"    pm.expect(jsonResponse.albums.items.length).to.be.above(0);  \r",
									"\r",
									"    // Iterate through each album and check if it contains the expected album name\r",
									"    jsonResponse.albums.items.forEach(function (album) {\r",
									"        pm.expect(album.name).to.eql(expectedAlbumName);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/search?q=album:Believer%20artist:Imagine%20Dragons&type=album&limit=6",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "album:Believer%20artist:Imagine%20Dragons"
								},
								{
									"key": "type",
									"value": "album"
								},
								{
									"key": "limit",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Viewing Profile Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Display profile name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.display_name).to.eql(\"Mahmoud Abdul-Fattah Barakat\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid view info with no authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"error POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401, 402]);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Body matches error\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "view user top tracks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Top track should be named Adrenaline\", function () {\r",
									"    // Get the top track name from the response\r",
									"    var topTrackName = pm.response.json().items[0].name;\r",
									"\r",
									"    // Check if the top track name is \"Adrenaline\"\r",
									"    pm.expect(topTrackName).to.eql(\"Adrenaline\");\r",
									"\r",
									"    // Log the top track name to the console\r",
									"    console.log(\"Top Track Name:\", topTrackName);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/top/:type",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"top",
								":type"
							],
							"variable": [
								{
									"key": "type",
									"value": "tracks"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "following an artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"}); //main test\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=5miyPYjh5EcpOSqloDJPID",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "5miyPYjh5EcpOSqloDJPID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "invalid follow with no auth.scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"pm.test(\"Status code is 403 insufficient scope\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"}); //main test\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "authUrl",
									"value": "https://accounts.spotify.com/authorize",
									"type": "string"
								},
								{
									"key": "scope",
									"value": "user-read-email",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "{{secretclient}}",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{ClientID}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "https://accounts.spotify.com/api/token",
									"type": "string"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/browser-callback",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=5miyPYjh5EcpOSqloDJPID",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "5miyPYjh5EcpOSqloDJPID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Followed Artists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Define the expected artist name\r",
									"var expectedArtistName = \"Ramy Gamal\";\r",
									"\r",
									"// Check if the response contains the expected artist name\r",
									"pm.test(\"Response should include the expected artist name\", function () {\r",
									"    // Iterate through the list of items\r",
									"    var items = jsonResponse.artists.items;\r",
									"    var artistFound = false;\r",
									"\r",
									"    for (var i = 0; i < items.length; i++) {\r",
									"        // Check if the current artist's name matches the expected name\r",
									"        if (items[i].name === expectedArtistName) {\r",
									"            artistFound = true;\r",
									"            break; // Exit the loop if the artist is found\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Assert that the artist is found in the list\r",
									"    pm.expect(artistFound).to.eql(true, \"Expected artist found in the list\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "unfollowing artist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist&ids=5miyPYjh5EcpOSqloDJPID",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "5miyPYjh5EcpOSqloDJPID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "make sure the artist unfollowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"// Define the artist name that should not be in the list after unfollowing\r",
									"var notExpectedArtistName = \"Ramy Gamal\";\r",
									"\r",
									"// Check if the response does not contain the artist name\r",
									"pm.test(\"Response should not include the unfollowed artist name\", function () {\r",
									"    // Iterate through the list of items\r",
									"    var items = jsonResponse.artists.items;\r",
									"    var artistFound = false;\r",
									"\r",
									"    for (var i = 0; i < items.length; i++) {\r",
									"        // Check if the current artist's name matches the not expected name\r",
									"        if (items[i].name === notExpectedArtistName) {\r",
									"            artistFound = true;\r",
									"            break; // Exit the loop if the artist is found\r",
									"        }\r",
									"    }\r",
									"\r",
									"    // Assert that the artist is not found in the list\r",
									"    pm.expect(artistFound).to.eql(false, \"Unfollowed artist found in the list\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following?type=artist",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check if artist is followed(valid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"valid followed artist\", function () {\r",
									"\r",
									"    pm.expect(jsonResponse).to.include(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following/contains?type=artist&ids=5abSRg0xN1NV3gLbuvX24M",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "5abSRg0xN1NV3gLbuvX24M"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check if artist is followed(invalid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"invalid followed artist\", function () {\r",
									"\r",
									"    pm.expect(jsonResponse).to.include(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/following/contains?type=artist&ids=5miyPYjh5EcpOSqloDJPID",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"following",
								"contains"
							],
							"query": [
								{
									"key": "type",
									"value": "artist"
								},
								{
									"key": "ids",
									"value": "5miyPYjh5EcpOSqloDJPID"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Playlists requests",
			"item": [
				{
					"name": "Creating a playlist valid test case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"New playlist\");\r",
									"});\r",
									"\r",
									"// Assuming you have a response object named 'response'\r",
									"var response = {\r",
									"    json: function () {\r",
									"        // Mock response JSON for demonstration\r",
									"        return {\r",
									"            playlist_id: 'your_playlist_id_value'\r",
									"        };\r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New playlist\",\r\n    \"description\": \"Sample playlist\",\r\n    \"public\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/:user_id/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								":user_id",
								"playlists"
							],
							"variable": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a playlist inValid test case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,401,402,403,404]);\r",
									"});\r",
									"\r",
									"//user id is required, so not entering it will give an error"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"New playlist\",\r\n    \"description\": \"Sample playlist\",\r\n    \"public\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{userid}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{userid}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "View My playlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should include an id\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"\r",
									"    // Check if the response body contains items\r",
									"    pm.expect(responseBody.items).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    // Extract the first item from the items array\r",
									"    var firstItem = responseBody.items[0];\r",
									"\r",
									"    // Check if the first item has the \"id\" property\r",
									"    pm.expect(firstItem).to.have.property(\"id\");\r",
									"\r",
									"    // Extract the id value from the first item\r",
									"    var playlistId = firstItem.id;\r",
									"\r",
									"    // Save the id value as a variable in the current environment\r",
									"    pm.environment.set(\"playlistId\", playlistId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/me/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"me",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding Song to my playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should include an snapshot\", function () {\r",
									"    \r",
									"    var snapshot = pm.response.json();\r",
									"\r",
									"    // Check if the parsed JSON object has the \"id\" property\r",
									"    pm.expect(snapshot).to.have.property(\"snapshot_id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks?uris=spotify:track:2LGdO5MtFdyphi2EihANZG",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"query": [
								{
									"key": "uris",
									"value": "spotify:track:2LGdO5MtFdyphi2EihANZG"
								}
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "{{playlistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getting playlist items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should include items\", function () {\r",
									"    \r",
									"    var items = pm.response.json();\r",
									"\r",
									"    // Check if the parsed JSON object has the \"item\" property\r",
									"    pm.expect(items).to.have.property(\"items\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "{{playlistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleting item from playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should include an snapshot\", function () {\r",
									"    \r",
									"    var snapshot = pm.response.json();\r",
									"\r",
									"    // Check if the parsed JSON object has the \"id\" property\r",
									"    pm.expect(snapshot).to.have.property(\"snapshot_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Set the deleted song URI\r",
									"pm.environment.set('deletedSongUri', 'spotify:track:5XeFesFbtLpXzIVDNQP22n');\r",
									"\r",
									"// Retrieve the deleted song URI\r",
									"var deletedSongUri = pm.environment.get('deletedSongUri');\r",
									"\r",
									"\r",
									"console.log('Deleted song URI:', deletedSongUri);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tracks\": [\r\n        {\r\n            \"uri\": \"spotify:track:5XeFesFbtLpXzIVDNQP22n\"\r\n        }\r\n    ]\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "{{playlistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ensuring song is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Updating Playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response include snapshot\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"snapshot_id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks?uris=spotify:track:1uE7Gln68v4duncYy4QgQm&range_start=2",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"query": [
								{
									"key": "uris",
									"value": "spotify:track:1uE7Gln68v4duncYy4QgQm"
								},
								{
									"key": "range_start",
									"value": "2"
								}
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "{{playlistId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getting playlist items | ensuring update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should include items\", function () {\r",
									"    \r",
									"    var items = pm.response.json();\r",
									"\r",
									"    // Check if the parsed JSON object has the \"item\" property\r",
									"    pm.expect(items).to.have.property(\"items\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "Bearer BQC8DSnqBcCjsM5fjvWO0lClHb37_E8y7OYHTkPkOIRU80cfWR7s5WYlZpk7rh8woJRQ0KyJANhQ6haHoqidifpXJA1LDMbxGWp7moJuRS529bxPi55xm53H62xyAXxMKZL18EQbuS1LG5KUjz8DojWugSRvkI1FpGr9sAPkJx-YSBURb-JtOzb9qrg7k4IB3S1K2V04J0UKEczUzbLOBxfcDd1k0qNjESgBHxAmUWFXrX-DCu0YdoyJbvpv_SCUkzlsWpLI7OrG8xQkaksOxGGI1arnAEoSNSXLdNtl1LQ",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/:playlist_id/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								":playlist_id",
								"tracks"
							],
							"variable": [
								{
									"key": "playlist_id",
									"value": "{{playlistId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "playlist-read-private playlist-modify-private playlist-modify-public user-top-read user-read-recently-played user-read-email user-read-private user-follow-modify user-follow-read",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.spotify.com/authorize",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://accounts.spotify.com/api/token",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{secretclient}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{ClientID}}",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://oauth.pstmn.io/v1/browser-callback",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "ClientID",
			"value": "8f00ada12fd14895aabca96fd4d4c956"
		},
		{
			"key": "secretclient",
			"value": "37255eb9920d4400bd58c8352525c6f7"
		}
	]
}